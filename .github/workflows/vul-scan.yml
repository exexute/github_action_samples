# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CodeCheck And Upload To AliYunOSS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 10 * * *'

jobs:
  Cache-Dependencies:
    name: Cache dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5
      - uses: actions/cache@v2
        id: mvn-cache # use this to check for `cache-hit` (`steps.mvn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ~/.m2 # !WARN does not work if running multiple node versions, instead use https://github.com/actions/cache/blob/master/examples.md#node---yarn
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-
      - name: Mvn Install
        if: steps.mvn-cache.outputs.cache-hit != 'true'
        run: mvn compile -Dmaven.test.skip=true

  Build-Agent:
    name: Build Java Agent
    runs-on: ubuntu-latest
    needs: [ Cache-Dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - name: Restore dependencies from cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-

      - name: Build DongTai-Java-Agent With Maven
        run: |
          mvn -version
          mvn -B package -Dmaven.test.skip=true
          ls -l release

      - uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: '8.0'
          auto-start: true
          root-password: yuhjnbGYUI
          user: test
          password: test

      - name: OpenRASP-Vulns-Test
        run: |
          cd ..

          echo "download apache-tomcat-8.5.0..."
          wget https://github.com/exexute/github_action_samples/releases/download/1.0.0/apache-tomcat-8.5.40.zip 1>/dev/null
          unzip apache-tomcat-8.5.40.zip 1>/dev/null

          echo "copy dongtai agent java to tomcat..."
          cp DongTai-agent-java/release/iast-agent.jar apache-tomcat-8.5.40/iast/agent.jar
          cp DongTai-agent-java/release/lib/*.jar apache-tomcat-8.5.40/temp/
          cd apache-tomcat-8.5.40

          echo "init mysql"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e "DROP DATABASE IF EXISTS test;"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e "CREATE DATABASE test;"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e "CREATE USER 'test'@'%' IDENTIFIED BY 'test';"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO 'test'@'%' WITH GRANT OPTION;"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e "FLUSH PRIVILEGES;"
          mysql -uroot -pyuhjnbGYUI -h127.0.0.1 -e 'show DATABASES;'

          echo "start catalina and waitting 30s..."
          export JAVA_TOOL_OPTIONS="-Dproject.create=true -Dproject.version=${{ github.event_name }}-${{ github.run_number }}"
          ./bin/startup.sh 2>/dev/null
          sleep 30

          echo "start vulns spider..."
          ./spider.sh

          echo "waitting for send vuls data"
          sleep 600

      - name: Benchmark-Vulns-Test
        run: |
          pwd
          ls -l
          java -version
          mvn -version
          # download Benchmark
          git clone https://github.com/exexute/BenchmarkJava.git
          cd BenchmarkJava
          mvn clean package cargo:start -Pdeploywdongtai
          # Copy Agent To Benchmark
          cp DongTai-agent-java/release/iast-agent.jar tools/DongTai/
          cp DongTai-agent-java/release/lib/*.jar target/cargo/installs/apache-tomcat-8.5.70/apache-tomcat-8.5.70/temp
          # Run Benchmark
          bash tools/DongTai/runBenchmark_wDongTai.sh

  Upload-To-OSS:
    name: Upload To TEST OSS
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [ Cache-Dependencies ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: 3.2.5

      - name: Restore dependencies from cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-mvn-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-mvn-

      - name: Build DongTai-Java-Agent With Maven
        run: |
          mvn -version
          mvn -B package -Dmaven.test.skip=true
          ls -l release
          ls -l release/lib

      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          endpoint: "oss-cn-beijing.aliyuncs.com"
          access-key-id: ${{ secrets.OSS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_KEY_SECRET }}
      - run: |
          ossutil cp -rf release/iast-agent.jar oss://dongtai/agent_test/java/iast-agent.jar --meta x-oss-object-acl:public-read
          ossutil cp -rf release/lib/ oss://dongtai/agent_test/java/ --meta x-oss-object-acl:public-read

  Run-Custom-Action:
    name: run custom action
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: exexute/hello-world-docker-action@main
        id: welcome
        with:
          who-to-greet: "owefsad"
      
      - name: show welcome timestamp
        run: echo "${{ steps.welcome.outputs.time }}"
      
      - name: create error event
        run: bash /tmp/a.sh


  Run-Success:
    if: success()
    runs-on: ubuntu-latest
    needs: [ Run-Custom-Action ]
    steps:
      - name: send notify
        run: echo "ci pipeline finished."

  Run-Failure:
    if: failure()
    runs-on: ubuntu-latest
    needs: [ Run-Custom-Action ]
    steps:
      - name: send notify
        run: echo "ci pipeline failure."
